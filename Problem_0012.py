# Problem 12 : Hgihly divisible triangular number
# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

# 1: 1
# 3: 1,3
# 6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28

# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?

# 問題 12 : 高度整除三角数
# 三角数の数列は自然数を足し合わせることで生成される。
# 例えば、7番目の三角数は1 + 2 + 3 + 4 + 5 + 6 + 7 = 28のように生成される。はじめの10項は以下のようになる :

# 三角数略

# 28が5個より多い約数を持つ最初の三角数であることがわかる。
# 100個より多い約数を持つ最初の三角数は何か？

# 対象の数の約数の数を返す関数
# 入力 : 調べたい数(int)
# 出力 : 調べたい数の約数の数(int)

def count_divisors(target_num : int):

    quantity_divisors = 0

    for index in range(1, target_num + 1):

        if target_num % index == 0:

            quantity_divisors += 1
        
        else:

            pass
    
    return quantity_divisors

print(count_divisors(28))